<?php

namespace Shortly;
require_once dirname(__FILE__) . '/../../src/MyDB.php';
require_once dirname(__FILE__) . '/../../src/Generator.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-05 at 04:50:48.
 */
class MyDBTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MyDB
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        copy(dirname(__FILE__) . "/../shortlyTest.db", dirname(__FILE__) . "/../test.db");
        MyDB::getInstance(dirname(__FILE__) . "/../test.db");        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Shortly\MyDB::getInstance
     * @todo   Implement testGetInstance().
     */
    public function testGetInstance() {
        $mydb = MyDB::getInstance();
        $this->assertTrue(is_object($mydb));
        $this->assertTrue(method_exists($mydb, "getAll"));
    }

    /**
     * @covers Shortly\MyDB::getAll
     * @todo   Implement testGetAll().
     */
    public function testGetAll() {
        $data = MyDB::getInstance()->getAll();
        $this->assertEmpty($data);
    }

    /**
     * @covers Shortly\MyDB::getUrl
     * @todo   Implement testGetUrl().
     */
    public function testGetUrl() {
        $key = "AVCDEFG";
        $device = "Desktop";
        $data = MyDB::getInstance()->getUrl($key, $device);
        $this->assertEmpty($data);
    }

    /**
     * @covers Shortly\MyDB::post
     * @todo   Implement testPost().
     */
    public function testPost() {
        $time = time();
        $key = Generator::getUniqueID($time);
        $url = "http://cnn.com";
        $device = "Desktop";
        $status = MyDB::getInstance()->post($time, $key, $url, $device);
        $this->assertTrue($status);
        $data = MyDB::getInstance()->getUrl($key, $device);
        $this->assertEquals($url, $data);
    }

    /**
     * @covers Shortly\MyDB::put
     * @todo   Implement testPut().
     */
    public function testPut() {
        $time = time();
        $key = Generator::getUniqueID($time);
        $url = "http://cnn.com";
        $device = "Desktop";
        $status = MyDB::getInstance()->put($key, $url, $device);
        $this->assertFalse($status);
        $status = MyDB::getInstance()->post($time, $key, $url, $device);
        $this->assertTrue($status);
        $url = "http://m.cnn.com";
        $device = "Mobile";
        $status = MyDB::getInstance()->put($key, $url, $device);
        $this->assertTrue($status);
        $data = MyDB::getInstance()->getUrl($key, $device);
        $this->assertEquals($url, $data);
    }

    /**
     * @covers Shortly\MyDB::getDeviceId
     * @todo   Implement testGetDeviceId().
     */
    public function testGetDeviceId() {
        $deviceType = "Desktop";
        $deviceId = MyDB::getInstance()->getDeviceId($deviceType);
        $this->assertEquals($deviceId, 1);
    }

}
